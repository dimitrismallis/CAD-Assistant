{
  "pid": 303,
  "subject": "2D",
  "answer": "A",
  "options": {
    "A": "Rounded",
    "B": "Sharp",
    "C": "Beveled",
    "D": null
  },
  "question": "Examine the following CAD code carefully to understand the 2D object it generates and answer the question based on your interpretation of the rendered image of that object.\n\n0:External;1:Arc(xCenter=0.0030, yCenter=0.0030, xDir=0.0000, yDir=1.0000, radius=0.0050, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);2:SN_Center;SubnodeConstraint(references=(2, 1));3:SN_Start;SubnodeConstraint(references=(3, 1));4:SN_End;SubnodeConstraint(references=(4, 1));5:Line(dirX=-1.0000, dirY=-0.0000, pntX=0.0000, pntY=0.0080, startParam=-0.0030, endParam=0.0030, isConstruction=False);6:SN_Start;SubnodeConstraint(references=(6, 5));CoincidentConstraint(references=(6, 3));7:SN_End;SubnodeConstraint(references=(7, 5));8:Arc(xCenter=-0.0030, yCenter=0.0030, xDir=-1.0000, yDir=0.0000, radius=0.0050, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);9:SN_Center;SubnodeConstraint(references=(9, 8));10:SN_Start;SubnodeConstraint(references=(10, 8));11:SN_End;SubnodeConstraint(references=(11, 8));CoincidentConstraint(references=(11, 7));12:Line(dirX=0.0000, dirY=-1.0000, pntX=-0.0080, pntY=0.0270, startParam=0.0240, endParam=0.0300, isConstruction=False);13:SN_Start;SubnodeConstraint(references=(13, 12));CoincidentConstraint(references=(13, 10));14:SN_End;SubnodeConstraint(references=(14, 12));15:Arc(xCenter=-0.0030, yCenter=-0.0030, xDir=-0.0000, yDir=-1.0000, radius=0.0050, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);16:SN_Center;SubnodeConstraint(references=(16, 15));17:SN_Start;SubnodeConstraint(references=(17, 15));18:SN_End;SubnodeConstraint(references=(18, 15));CoincidentConstraint(references=(18, 14));19:Line(dirX=1.0000, dirY=0.0000, pntX=0.0000, pntY=-0.0080, startParam=-0.0030, endParam=0.0030, isConstruction=False);20:SN_Start;SubnodeConstraint(references=(20, 19));CoincidentConstraint(references=(20, 17));21:SN_End;SubnodeConstraint(references=(21, 19));22:Arc(xCenter=0.0030, yCenter=-0.0030, xDir=1.0000, yDir=-0.0000, radius=0.0050, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);23:SN_Center;SubnodeConstraint(references=(23, 22));24:SN_Start;SubnodeConstraint(references=(24, 22));25:SN_End;SubnodeConstraint(references=(25, 22));CoincidentConstraint(references=(25, 21));26:Line(dirX=0.0000, dirY=1.0000, pntX=0.0080, pntY=0.0270, startParam=-0.0300, endParam=-0.0240, isConstruction=False);27:SN_Start;SubnodeConstraint(references=(27, 26));CoincidentConstraint(references=(27, 24));28:SN_End;SubnodeConstraint(references=(28, 26));CoincidentConstraint(references=(28, 4));29:Arc(xCenter=0.0030, yCenter=0.0030, xDir=0.0000, yDir=1.0000, radius=0.0030, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);30:SN_Center;SubnodeConstraint(references=(30, 29));31:SN_Start;SubnodeConstraint(references=(31, 29));32:SN_End;SubnodeConstraint(references=(32, 29));33:Line(dirX=-1.0000, dirY=-0.0000, pntX=0.0000, pntY=0.0060, startParam=-0.0030, endParam=0.0030, isConstruction=False);34:SN_Start;SubnodeConstraint(references=(34, 33));CoincidentConstraint(references=(34, 31));35:SN_End;SubnodeConstraint(references=(35, 33));36:Arc(xCenter=-0.0030, yCenter=0.0030, xDir=-1.0000, yDir=0.0000, radius=0.0030, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);37:SN_Center;SubnodeConstraint(references=(37, 36));38:SN_Start;SubnodeConstraint(references=(38, 36));39:SN_End;SubnodeConstraint(references=(39, 36));CoincidentConstraint(references=(39, 35));40:Line(dirX=0.0000, dirY=-1.0000, pntX=-0.0060, pntY=0.0270, startParam=0.0240, endParam=0.0300, isConstruction=False);41:SN_Start;SubnodeConstraint(references=(41, 40));CoincidentConstraint(references=(41, 38));42:SN_End;SubnodeConstraint(references=(42, 40));43:Arc(xCenter=-0.0030, yCenter=-0.0030, xDir=-0.0000, yDir=-1.0000, radius=0.0030, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);44:SN_Center;SubnodeConstraint(references=(44, 43));45:SN_Start;SubnodeConstraint(references=(45, 43));46:SN_End;SubnodeConstraint(references=(46, 43));CoincidentConstraint(references=(46, 42));47:Line(dirX=1.0000, dirY=0.0000, pntX=0.0000, pntY=-0.0060, startParam=-0.0030, endParam=0.0030, isConstruction=False);48:SN_Start;SubnodeConstraint(references=(48, 47));CoincidentConstraint(references=(48, 45));49:SN_End;SubnodeConstraint(references=(49, 47));50:Arc(xCenter=0.0030, yCenter=-0.0030, xDir=1.0000, yDir=-0.0000, radius=0.0030, startParam=-0.0000, endParam=1.5708, clockwise=True, isConstruction=False);51:SN_Center;SubnodeConstraint(references=(51, 50));52:SN_Start;SubnodeConstraint(references=(52, 50));53:SN_End;SubnodeConstraint(references=(53, 50));CoincidentConstraint(references=(53, 49));54:Line(dirX=0.0000, dirY=1.0000, pntX=0.0060, pntY=0.0270, startParam=-0.0300, endParam=-0.0240, isConstruction=False);55:SN_Start;SubnodeConstraint(references=(55, 54));CoincidentConstraint(references=(55, 52));56:SN_End;SubnodeConstraint(references=(56, 54));CoincidentConstraint(references=(56, 32));57:Stop;\n\nHint: the CAD code has the following syntax:\n\nCAD code consists of a sequence of CAD commands that describe a 2D object.\nThe commands fall into two categories: primitive and constraint. \nIn total, there are five possible primitive types: \nPoint(x, y), Line(dirX, dirY, pntX, pntY, startParam, endParam), Circle(xCenter, yCenter, xDir, yDir, radius, clockwise), Arc(xCenter, yCenter, xDir, yDir, radius, clockwise, startParam, endParam), \nand Ellipse(xCenter, yCenter, xDir, yDir, radius, minorRadius, clockwise).\nx, y: the point coordinates.\ndirX, dirY: the unit direction vector.\nxCenter, yCenter: the coordinates the center point.\nclockwise: a boolean value that indicates the orientation of the unit direction vector.\npntX, pntY (Line): the coordinates of a point on the line.\nstartParam, endParam (Line): signed start/end point distances to the point (pntX, pntY).\nstartParam, endParam (Arc): start/end angles to the unit direction vector.\nAll primitives have an isConstruction boolean parameter indicating if a primitive is to be physically realized or simply serve as a reference for other primitives.\nAll constraints act on at least one primitive, indicated by the corresponding number.\n\nQuestion: What type of corners does the CAD object predominantly feature?",
  "fcstd_file": "2D_0303.FCStd",
  "isconstruction_file": "2D_0303_isconstruction.json"
}