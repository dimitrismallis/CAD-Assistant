{
  "pid": 339,
  "subject": "2D",
  "answer": "D",
  "options": {
    "A": "Triangle",
    "B": "Rectangle",
    "C": "Trapezoid",
    "D": "Parallelogram"
  },
  "question": "Examine the following CAD code carefully to understand the 2D object it generates and answer the question based on your interpretation of the rendered image of that object.\n\n0:External;1:Line(dirX=-0.5000, dirY=0.8660, pntX=1.1249, pntY=-0.3031, startParam=-0.1022, endParam=0.0478, isConstruction=False);2:SN_Start;SubnodeConstraint(references=(2, 1));3:SN_End;SubnodeConstraint(references=(3, 1));4:Line(dirX=-0.8660, dirY=-0.5000, pntX=0.9896, pntY=-0.3260, startParam=-0.1286, endParam=-0.1261, isConstruction=False);PerpendicularConstraint(references=(4, 1));5:SN_Start;SubnodeConstraint(references=(5, 4));CoincidentConstraint(references=(5, 3));6:SN_End;SubnodeConstraint(references=(6, 4));7:Line(dirX=0.5000, dirY=-0.8660, pntX=1.1437, pntY=-0.3406, startParam=-0.0896, endParam=0.0604, isConstruction=False);ParallelConstraint(references=(7, 1));8:SN_Start;SubnodeConstraint(references=(8, 7));CoincidentConstraint(references=(8, 6));9:SN_End;SubnodeConstraint(references=(9, 7));10:Line(dirX=0.8660, dirY=0.5000, pntX=1.0572, pntY=-0.4602, startParam=0.1347, endParam=0.1372, isConstruction=False);PerpendicularConstraint(references=(10, 1));PerpendicularConstraint(references=(10, 7));11:SN_Start;SubnodeConstraint(references=(11, 10));CoincidentConstraint(references=(11, 9));12:SN_End;SubnodeConstraint(references=(12, 10));CoincidentConstraint(references=(12, 2));13:Line(dirX=0.5000, dirY=-0.8660, pntX=1.1768, pntY=-0.3930, startParam=-0.0015, endParam=0.0022, isConstruction=False);PerpendicularConstraint(references=(13, 10));14:SN_Start;SubnodeConstraint(references=(14, 13));CoincidentConstraint(references=(14, 2));15:SN_End;SubnodeConstraint(references=(15, 13));16:Line(dirX=-1.0000, dirY=-0.0000, pntX=1.0862, pntY=-0.3949, startParam=-0.0917, endParam=-0.0067, isConstruction=False);HorizontalConstraint(references=(16,));17:SN_Start;SubnodeConstraint(references=(17, 16));CoincidentConstraint(references=(17, 15));18:SN_End;SubnodeConstraint(references=(18, 16));19:Line(dirX=-0.5000, dirY=0.8660, pntX=1.0992, pntY=-0.2586, startParam=-0.0037, endParam=-0.0017, isConstruction=False);ParallelConstraint(references=(19, 1));20:SN_Start;SubnodeConstraint(references=(20, 19));CoincidentConstraint(references=(20, 3));21:SN_End;SubnodeConstraint(references=(21, 19));22:Line(dirX=-1.0000, dirY=0.0000, pntX=0.9795, pntY=-0.2600, startParam=-0.1205, endParam=-0.0355, isConstruction=False);HorizontalConstraint(references=(22,));23:SN_Start;SubnodeConstraint(references=(23, 22));CoincidentConstraint(references=(23, 21));24:SN_End;SubnodeConstraint(references=(24, 22));25:Line(dirX=0.5000, dirY=-0.8660, pntX=1.0632, pntY=-0.3434, startParam=-0.0963, endParam=0.0594, isConstruction=False);ParallelConstraint(references=(25, 1));26:SN_Start;SubnodeConstraint(references=(26, 25));CoincidentConstraint(references=(26, 24));27:SN_End;SubnodeConstraint(references=(27, 25));CoincidentConstraint(references=(27, 18));28:Stop;\n\nHint: the CAD code has the following syntax:\n\nCAD code consists of a sequence of CAD commands that describe a 2D object.\nThe commands fall into two categories: primitive and constraint. \nIn total, there are five possible primitive types: \nPoint(x, y), Line(dirX, dirY, pntX, pntY, startParam, endParam), Circle(xCenter, yCenter, xDir, yDir, radius, clockwise), Arc(xCenter, yCenter, xDir, yDir, radius, clockwise, startParam, endParam), \nand Ellipse(xCenter, yCenter, xDir, yDir, radius, minorRadius, clockwise).\nx, y: the point coordinates.\ndirX, dirY: the unit direction vector.\nxCenter, yCenter: the coordinates the center point.\nclockwise: a boolean value that indicates the orientation of the unit direction vector.\npntX, pntY (Line): the coordinates of a point on the line.\nstartParam, endParam (Line): signed start/end point distances to the point (pntX, pntY).\nstartParam, endParam (Arc): start/end angles to the unit direction vector.\nAll primitives have an isConstruction boolean parameter indicating if a primitive is to be physically realized or simply serve as a reference for other primitives.\nAll constraints act on at least one primitive, indicated by the corresponding number.\n\nQuestion: What type of geometric shape is the CAD object in the image?",
  "fcstd_file": "2D_0339.FCStd",
  "isconstruction_file": "2D_0339_isconstruction.json"
}