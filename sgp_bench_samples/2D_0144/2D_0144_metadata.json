{
  "pid": 144,
  "subject": "2D",
  "answer": "B",
  "options": {
    "A": "One",
    "B": "Two",
    "C": "Three",
    "D": "Four"
  },
  "question": "Examine the following CAD code carefully to understand the 2D object it generates and answer the question based on your interpretation of the rendered image of that object.\n\n0:External;1:Line(dirX=0.0000, dirY=-1.0000, pntX=-0.0032, pntY=0.0010, startParam=-0.0339, endParam=0.0339, isConstruction=True);2:SN_Start;SubnodeConstraint(references=(2, 1));MidpointConstraint(references=(2, 0));3:SN_End;SubnodeConstraint(references=(3, 1));MidpointConstraint(references=(3, 0));4:Line(dirX=1.0000, dirY=0.0000, pntX=-0.0032, pntY=0.0010, startParam=-0.0550, endParam=0.0550, isConstruction=True);5:SN_Start;SubnodeConstraint(references=(5, 4));MidpointConstraint(references=(5, 0));6:SN_End;SubnodeConstraint(references=(6, 4));MidpointConstraint(references=(6, 0));7:Line(dirX=1.0000, dirY=0.0000, pntX=-0.0015, pntY=0.0316, startParam=-0.0400, endParam=0.0366, isConstruction=False);8:SN_Start;SubnodeConstraint(references=(8, 7));9:SN_End;SubnodeConstraint(references=(9, 7));10:Line(dirX=1.0000, dirY=0.0000, pntX=-0.0015, pntY=-0.0297, startParam=-0.0400, endParam=0.0366, isConstruction=False);ParallelConstraint(references=(10, 7));HorizontalConstraint(references=(10,));11:SN_Start;SubnodeConstraint(references=(11, 10));12:SN_End;SubnodeConstraint(references=(12, 10));13:Line(dirX=0.0000, dirY=-1.0000, pntX=-0.0447, pntY=0.0016, startParam=-0.0268, endParam=0.0282, isConstruction=False);PerpendicularConstraint(references=(13, 10));14:SN_Start;SubnodeConstraint(references=(14, 13));15:SN_End;SubnodeConstraint(references=(15, 13));16:Line(dirX=0.0000, dirY=-1.0000, pntX=0.0383, pntY=0.0016, startParam=-0.0268, endParam=0.0282, isConstruction=False);ParallelConstraint(references=(16, 13));17:SN_Start;SubnodeConstraint(references=(17, 16));18:SN_End;SubnodeConstraint(references=(18, 16));19:Line(dirX=0.0000, dirY=-1.0000, pntX=-0.0032, pntY=0.0140, startParam=-0.0176, endParam=0.0438, isConstruction=True);CoincidentConstraint(references=(19, 1));20:SN_Start;SubnodeConstraint(references=(20, 19));21:SN_End;SubnodeConstraint(references=(21, 19));22:Line(dirX=1.0000, dirY=0.0000, pntX=0.0035, pntY=0.0010, startParam=-0.0483, endParam=0.0347, isConstruction=True);CoincidentConstraint(references=(22, 4));23:SN_Start;SubnodeConstraint(references=(23, 22));24:SN_End;SubnodeConstraint(references=(24, 22));25:Point(x=-0.0447, y=0.0316, isConstruction=False);CoincidentConstraint(references=(25, 13));CoincidentConstraint(references=(25, 7));26:Arc(xCenter=-0.0415, yCenter=0.0285, xDir=1.0000, yDir=0.0000, radius=0.0032, startParam=1.5708, endParam=3.1416, clockwise=False, isConstruction=False);TangentConstraint(references=(26, 7));TangentConstraint(references=(26, 13));27:SN_Center;SubnodeConstraint(references=(27, 26));28:SN_Start;SubnodeConstraint(references=(28, 26));CoincidentConstraint(references=(28, 8));29:SN_End;SubnodeConstraint(references=(29, 26));CoincidentConstraint(references=(29, 14));30:Point(x=0.0383, y=0.0316, isConstruction=False);MidpointConstraint(references=(30, 25, 20));CoincidentConstraint(references=(30, 16));CoincidentConstraint(references=(30, 7));31:Arc(xCenter=0.0351, yCenter=0.0285, xDir=1.0000, yDir=0.0000, radius=0.0032, startParam=0.0000, endParam=1.5708, clockwise=False, isConstruction=False);TangentConstraint(references=(31, 7));TangentConstraint(references=(31, 16));EqualConstraint(references=(31, 26));32:SN_Center;SubnodeConstraint(references=(32, 31));33:SN_Start;SubnodeConstraint(references=(33, 31));CoincidentConstraint(references=(33, 17));34:SN_End;SubnodeConstraint(references=(34, 31));CoincidentConstraint(references=(34, 9));35:Point(x=-0.0447, y=-0.0297, isConstruction=False);MidpointConstraint(references=(35, 25, 23));CoincidentConstraint(references=(35, 10));CoincidentConstraint(references=(35, 13));36:Arc(xCenter=-0.0415, yCenter=-0.0266, xDir=1.0000, yDir=0.0000, radius=0.0032, startParam=-3.1416, endParam=-1.5708, clockwise=False, isConstruction=False);TangentConstraint(references=(36, 13));TangentConstraint(references=(36, 10));EqualConstraint(references=(36, 26));37:SN_Center;SubnodeConstraint(references=(37, 36));38:SN_Start;SubnodeConstraint(references=(38, 36));CoincidentConstraint(references=(38, 15));39:SN_End;SubnodeConstraint(references=(39, 36));CoincidentConstraint(references=(39, 11));40:Point(x=0.0383, y=-0.0297, isConstruction=False);MidpointConstraint(references=(40, 35, 21));MidpointConstraint(references=(40, 30, 24));CoincidentConstraint(references=(40, 10));CoincidentConstraint(references=(40, 16));41:Arc(xCenter=0.0351, yCenter=-0.0266, xDir=1.0000, yDir=0.0000, radius=0.0032, startParam=-1.5708, endParam=0.0000, clockwise=False, isConstruction=False);TangentConstraint(references=(41, 16));TangentConstraint(references=(41, 10));EqualConstraint(references=(41, 26));42:SN_Center;SubnodeConstraint(references=(42, 41));43:SN_Start;SubnodeConstraint(references=(43, 41));CoincidentConstraint(references=(43, 12));44:SN_End;SubnodeConstraint(references=(44, 41));CoincidentConstraint(references=(44, 18));45:Stop;\n\nHint: the CAD code has the following syntax:\n\nCAD code consists of a sequence of CAD commands that describe a 2D object.\nThe commands fall into two categories: primitive and constraint. \nIn total, there are five possible primitive types: \nPoint(x, y), Line(dirX, dirY, pntX, pntY, startParam, endParam), Circle(xCenter, yCenter, xDir, yDir, radius, clockwise), Arc(xCenter, yCenter, xDir, yDir, radius, clockwise, startParam, endParam), \nand Ellipse(xCenter, yCenter, xDir, yDir, radius, minorRadius, clockwise).\nx, y: the point coordinates.\ndirX, dirY: the unit direction vector.\nxCenter, yCenter: the coordinates the center point.\nclockwise: a boolean value that indicates the orientation of the unit direction vector.\npntX, pntY (Line): the coordinates of a point on the line.\nstartParam, endParam (Line): signed start/end point distances to the point (pntX, pntY).\nstartParam, endParam (Arc): start/end angles to the unit direction vector.\nAll primitives have an isConstruction boolean parameter indicating if a primitive is to be physically realized or simply serve as a reference for other primitives.\nAll constraints act on at least one primitive, indicated by the corresponding number.\n\nQuestion: How many lines of symmetry does the object in the image have?",
  "fcstd_file": "2D_0144.FCStd",
  "isconstruction_file": "2D_0144_isconstruction.json"
}