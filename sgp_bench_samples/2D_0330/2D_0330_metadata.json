{
  "pid": 330,
  "subject": "2D",
  "answer": "C",
  "options": {
    "A": "Two",
    "B": "Four",
    "C": "Six",
    "D": "Eight"
  },
  "question": "Examine the following CAD code carefully to understand the 2D object it generates and answer the question based on your interpretation of the rendered image of that object.\n\n0:External;1:Circle(xCenter=0.0000, yCenter=0.0000, xDir=1.0000, yDir=0.0000, radius=0.0060, clockwise=False, isConstruction=False);RadiusConstraint(references=(1,), length=0.006 METER);2:SN_Center;SubnodeConstraint(references=(2, 1));CoincidentConstraint(references=(2, 0));3:Circle(xCenter=0.0000, yCenter=0.0000, xDir=1.0000, yDir=0.0000, radius=0.0120, clockwise=False, isConstruction=False);RadiusConstraint(references=(3,), length=0.012 METER);4:SN_Center;SubnodeConstraint(references=(4, 3));CoincidentConstraint(references=(4, 2));5:Line(dirX=0.0000, dirY=1.0000, pntX=0.0000, pntY=0.0254, startParam=-0.0254, endParam=0.0246, isConstruction=True);VerticalConstraint(references=(5,));LengthConstraint(references=(5,), direction=MINIMUM, length=0.05 METER);6:SN_Start;SubnodeConstraint(references=(6, 5));CoincidentConstraint(references=(6, 2));7:SN_End;SubnodeConstraint(references=(7, 5));8:Line(dirX=-1.0000, dirY=-0.0000, pntX=-0.0327, pntY=0.0500, startParam=-0.0327, endParam=0.0480, isConstruction=True);HorizontalConstraint(references=(8,));9:SN_Start;SubnodeConstraint(references=(9, 8));CoincidentConstraint(references=(9, 7));10:SN_End;SubnodeConstraint(references=(10, 8));11:Line(dirX=0.8503, dirY=-0.5263, pntX=-0.0309, pntY=0.0191, startParam=-0.0587, endParam=0.0363, isConstruction=True);LengthConstraint(references=(11,), direction=MINIMUM, length=0.095 METER);12:SN_Start;SubnodeConstraint(references=(12, 11));CoincidentConstraint(references=(12, 10));13:SN_End;SubnodeConstraint(references=(13, 11));CoincidentConstraint(references=(13, 2));14:Line(dirX=0.6771, dirY=0.7359, pntX=0.0221, pntY=0.0240, startParam=-0.0326, endParam=0.0353, isConstruction=True);15:SN_Start;SubnodeConstraint(references=(15, 14));CoincidentConstraint(references=(15, 13));16:SN_End;SubnodeConstraint(references=(16, 14));HorizontalConstraint(references=(16, 7));17:Line(dirX=-1.0000, dirY=-0.0000, pntX=0.0447, pntY=0.0500, startParam=-0.0013, endParam=0.0447, isConstruction=True);18:SN_Start;SubnodeConstraint(references=(18, 17));CoincidentConstraint(references=(18, 16));19:SN_End;SubnodeConstraint(references=(19, 17));CoincidentConstraint(references=(19, 7));20:Circle(xCenter=-0.0808, yCenter=0.0500, xDir=1.0000, yDir=0.0000, radius=0.0100, clockwise=False, isConstruction=False);RadiusConstraint(references=(20,), length=0.01 METER);21:SN_Center;SubnodeConstraint(references=(21, 20));CoincidentConstraint(references=(21, 10));22:Circle(xCenter=0.0460, yCenter=0.0500, xDir=1.0000, yDir=0.0000, radius=0.0100, clockwise=False, isConstruction=False);RadiusConstraint(references=(22,), length=0.01 METER);23:SN_Center;SubnodeConstraint(references=(23, 22));CoincidentConstraint(references=(23, 16));24:Circle(xCenter=0.0460, yCenter=0.0500, xDir=1.0000, yDir=0.0000, radius=0.0060, clockwise=False, isConstruction=False);RadiusConstraint(references=(24,), length=0.006 METER);25:SN_Center;SubnodeConstraint(references=(25, 24));CoincidentConstraint(references=(25, 16));26:Circle(xCenter=-0.0808, yCenter=0.0500, xDir=1.0000, yDir=0.0000, radius=0.0060, clockwise=False, isConstruction=False);RadiusConstraint(references=(26,), length=0.006 METER);27:SN_Center;SubnodeConstraint(references=(27, 26));CoincidentConstraint(references=(27, 10));28:Line(dirX=1.0000, dirY=0.0000, pntX=-0.0174, pntY=0.0600, startParam=-0.0634, endParam=0.0634, isConstruction=False);TangentConstraint(references=(28, 20));TangentConstraint(references=(28, 22));29:SN_Start;SubnodeConstraint(references=(29, 28));VerticalConstraint(references=(29, 10));30:SN_End;SubnodeConstraint(references=(30, 28));VerticalConstraint(references=(30, 16));31:Line(dirX=0.8390, dirY=-0.5441, pntX=-0.0467, pntY=0.0160, startParam=-0.0471, endParam=0.0479, isConstruction=False);TangentConstraint(references=(31, 20));TangentConstraint(references=(31, 3));32:SN_Start;SubnodeConstraint(references=(32, 31));CoincidentConstraint(references=(32, 20));33:SN_End;SubnodeConstraint(references=(33, 31));CoincidentConstraint(references=(33, 3));34:Line(dirX=-0.6551, dirY=-0.7555, pntX=0.0320, pntY=0.0186, startParam=-0.0329, endParam=0.0351, isConstruction=True);TangentConstraint(references=(34, 22));TangentConstraint(references=(34, 3));35:SN_Start;SubnodeConstraint(references=(35, 34));CoincidentConstraint(references=(35, 22));36:SN_End;SubnodeConstraint(references=(36, 34));CoincidentConstraint(references=(36, 3));37:Arc(xCenter=0.0460, yCenter=0.0057, xDir=1.0000, yDir=0.0000, radius=0.0343, startParam=-4.7124, endParam=-3.0193, clockwise=False, isConstruction=False);TangentConstraint(references=(37, 22));TangentConstraint(references=(37, 3));38:SN_Center;SubnodeConstraint(references=(38, 37));39:SN_Start;SubnodeConstraint(references=(39, 37));VerticalConstraint(references=(39, 16));CoincidentConstraint(references=(39, 22));40:SN_End;SubnodeConstraint(references=(40, 37));CoincidentConstraint(references=(40, 3));41:Stop;\n\nHint: the CAD code has the following syntax:\n\nCAD code consists of a sequence of CAD commands that describe a 2D object.\nThe commands fall into two categories: primitive and constraint. \nIn total, there are five possible primitive types: \nPoint(x, y), Line(dirX, dirY, pntX, pntY, startParam, endParam), Circle(xCenter, yCenter, xDir, yDir, radius, clockwise), Arc(xCenter, yCenter, xDir, yDir, radius, clockwise, startParam, endParam), \nand Ellipse(xCenter, yCenter, xDir, yDir, radius, minorRadius, clockwise).\nx, y: the point coordinates.\ndirX, dirY: the unit direction vector.\nxCenter, yCenter: the coordinates the center point.\nclockwise: a boolean value that indicates the orientation of the unit direction vector.\npntX, pntY (Line): the coordinates of a point on the line.\nstartParam, endParam (Line): signed start/end point distances to the point (pntX, pntY).\nstartParam, endParam (Arc): start/end angles to the unit direction vector.\nAll primitives have an isConstruction boolean parameter indicating if a primitive is to be physically realized or simply serve as a reference for other primitives.\nAll constraints act on at least one primitive, indicated by the corresponding number.\n\nQuestion: How many circles are visible in the CAD object?",
  "fcstd_file": "2D_0330.FCStd",
  "isconstruction_file": "2D_0330_isconstruction.json"
}